name: CI Pipeline

on:
  push:
    branches: [main, dev]
  pull_request:
    branches: [main]

jobs:
  test-and-coverage:
    name: Tests & Coverage Check
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18, 20]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Lint code
        run: npm run lint
      
      - name: Type check
        run: npx tsc --noEmit
      
      - name: Run tests with coverage
        run: npm test -- --coverage --reporter=verbose
      
      - name: Generate coverage report
        run: npx vitest run --coverage --reporter=json --reporter=json-summary
      
      - name: Coverage check (80% minimum)
        run: |
          COVERAGE=$(node -p "
            const fs = require('fs');
            try {
              const coverage = JSON.parse(fs.readFileSync('coverage/coverage-summary.json', 'utf8'));
              const total = coverage.total;
              const avgCoverage = (total.lines.pct + total.functions.pct + total.branches.pct + total.statements.pct) / 4;
              Math.round(avgCoverage * 100) / 100;
            } catch (e) {
              console.error('Coverage file not found');
              0;
            }
          ")
          echo "Coverage: $COVERAGE%"
          if (( $(echo "$COVERAGE < 80" | bc -l) )); then
            echo "‚ùå Coverage $COVERAGE% is below the required 80% threshold"
            echo "::error::Test coverage ($COVERAGE%) is below the required 80% threshold"
            exit 1
          else
            echo "‚úÖ Coverage $COVERAGE% meets the required 80% threshold"
          fi
      
      - name: Build project
        run: npm run build

      - name: Validate CSP headers and meta
        run: ./scripts/validate-csp.sh
      
      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: coverage-report-node-${{ matrix.node-version }}
          path: |
            coverage/
          retention-days: 7
      
      - name: Comment coverage on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            try {
              const coverage = JSON.parse(fs.readFileSync('coverage/coverage-summary.json', 'utf8'));
              const total = coverage.total;
              const avgCoverage = (total.lines.pct + total.functions.pct + total.branches.pct + total.statements.pct) / 4;
              
              const body = `## üß™ Test Coverage Report
              
              | Metric | Coverage | Status |
              |--------|----------|---------|
              | Lines | ${total.lines.pct}% | ${total.lines.pct >= 80 ? '‚úÖ' : '‚ùå'} |
              | Functions | ${total.functions.pct}% | ${total.functions.pct >= 80 ? '‚úÖ' : '‚ùå'} |
              | Branches | ${total.branches.pct}% | ${total.branches.pct >= 80 ? '‚úÖ' : '‚ùå'} |
              | Statements | ${total.statements.pct}% | ${total.statements.pct >= 80 ? '‚úÖ' : '‚ùå'} |
              | **Overall** | **${avgCoverage.toFixed(2)}%** | **${avgCoverage >= 80 ? '‚úÖ PASSED' : '‚ùå FAILED'}** |
              
              ${avgCoverage >= 80 ? 'üéâ Coverage meets the 80% requirement!' : '‚ö†Ô∏è Coverage is below the 80% requirement. Please add more tests.'}
              `;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
            } catch (error) {
              console.log('Could not find coverage report');
            }

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: moderate
          allow-licenses: MIT, ISC, Apache-2.0, BSD-2-Clause, BSD-3-Clause

  # Block merge if coverage or tests fail
  coverage-gate:
    name: Coverage Gate
    runs-on: ubuntu-latest
    needs: [test-and-coverage]
    if: github.event_name == 'pull_request'
    steps:
      - name: Check coverage gate
        run: |
          echo "‚úÖ All tests passed and coverage requirements met"
          echo "This job acts as a required status check to block merges"