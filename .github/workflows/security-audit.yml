name: Security Audit & PR Checks

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run every Monday at 02:00 UTC
    - cron: '0 2 * * 1'

jobs:
  security-pr-checks:
    name: PR Security Checks
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run npm audit (blocking)
      run: npm audit --audit-level moderate
      
    - name: Run audit-ci (blocking)
      run: npx audit-ci --moderate --report-type summary
      
    - name: Run Snyk security scan
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=medium --fail-on=all
        
    - name: Snyk Code Quality Analysis
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        command: code test
        args: --severity-threshold=medium

  dependency-audit:
    name: Dependency Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run npm audit
      run: npm audit --audit-level moderate
      
    - name: Run audit-ci with detailed report
      run: npx audit-ci --moderate --report-type full --output-format json | tee audit-report.json
      
    - name: Upload audit report
      uses: actions/upload-artifact@v4
      with:
        name: audit-report
        path: audit-report.json
        
  snyk-security:
    name: Snyk Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/node@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=medium --json-file-output=snyk-report.json
        
    - name: Upload Snyk report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: snyk-report
        path: snyk-report.json
        
  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: javascript,typescript
        
    - name: Autobuild
      uses: github/codeql-action/autobuild@v3
      
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      
  vulnerability-tests:
    name: Basic Vulnerability Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Make security test script executable
      run: chmod +x scripts/security-tests.sh
      
    - name: Install testing tools
      run: |
        sudo apt-get update
        sudo apt-get install -y curl bc
        
    - name: Run XSS injection tests
      run: |
        echo "🧪 Running XSS injection tests..."
        ./scripts/security-tests.sh https://preview--tupa-hub-connect.lovable.app
        
    - name: Verify iframe embedding prevention
      run: |
        echo "🔒 Testing iframe embedding prevention..."
        response=$(curl -I https://preview--tupa-hub-connect.lovable.app/consumo)
        
        if ! echo "$response" | grep -i "X-Frame-Options: DENY"; then
          echo "❌ X-Frame-Options missing"
          exit 1
        fi
        
        if ! echo "$response" | grep -i "Content-Security-Policy"; then
          echo "❌ CSP header missing"  
          exit 1
        fi
        
        echo "✅ Security headers verified"
        
    - name: Check CSP blocks external scripts
      run: |
        echo "🛡️ Verifying CSP external script blocking..."
        headers=$(curl -I https://preview--tupa-hub-connect.lovable.app/consumo)
        
        if echo "$headers" | grep -i "script-src.*'self'"; then
          echo "✅ CSP script-src includes 'self'"
        else
          echo "❌ CSP script-src misconfigured"
          exit 1
        fi

  owasp-zap-baseline:
    name: OWASP ZAP Baseline Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: ZAP Baseline Scan
      uses: zaproxy/action-baseline@v0.12.0
      with:
        target: 'https://preview--tupa-hub-connect.lovable.app'
        rules_file_name: '.zap/rules.tsv'
        cmd_options: '-a -d -T 60 -m 10'
        
  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [dependency-audit, snyk-security, codeql-analysis]
    if: always()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        pattern: '*-report*'
        merge-multiple: true
        
    - name: Generate comprehensive security report
      run: |
        echo "# 🔒 Security Audit Results - $(date)" > security-report.md
        echo "" >> security-report.md
        echo "## 📊 Summary" >> security-report.md
        echo "- **Dependency Audit**: ${{ needs.dependency-audit.result }}" >> security-report.md
        echo "- **Snyk Scan**: ${{ needs.snyk-security.result }}" >> security-report.md
        echo "- **CodeQL Analysis**: ${{ needs.codeql-analysis.result }}" >> security-report.md
        echo "" >> security-report.md
        
        if [ -f "audit-report.json" ]; then
          echo "## 🔍 NPM Audit Details" >> security-report.md
          echo "\`\`\`json" >> security-report.md
          head -20 audit-report.json >> security-report.md
          echo "\`\`\`" >> security-report.md
        fi
        
        if [ -f "snyk-report.json" ]; then
          echo "## 🛡️ Snyk Vulnerability Details" >> security-report.md
          echo "\`\`\`json" >> security-report.md
          head -20 snyk-report.json >> security-report.md
          echo "\`\`\`" >> security-report.md
        fi
        
    - name: Upload Security Report
      uses: actions/upload-artifact@v4
      with:
        name: security-report
        path: security-report.md
        
    - name: Comment security status on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const body = `## 🔒 Security Audit Results
          
          | Check | Status |
          |-------|---------|
          | Dependency Audit | ${{ needs.dependency-audit.result == 'success' ? '✅' : '❌' }} |
          | Snyk Security Scan | ${{ needs.snyk-security.result == 'success' ? '✅' : '❌' }} |
          | CodeQL Analysis | ${{ needs.codeql-analysis.result == 'success' ? '✅' : '❌' }} |
          
          ${{ needs.dependency-audit.result == 'success' && needs.snyk-security.result == 'success' && needs.codeql-analysis.result == 'success' ? '🎉 All security checks passed!' : '⚠️ Some security checks failed. Please review the issues above.' }}
          
          📄 Detailed reports are available in the workflow artifacts.
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: body
          });

  # Security gate for PR blocking
  security-gate:
    name: Security Gate
    runs-on: ubuntu-latest
    needs: [security-pr-checks]
    if: github.event_name == 'pull_request'
    steps:
      - name: Check security gate
        run: |
          echo "✅ All security checks passed"
          echo "This job acts as a required status check to block merges"